<?php
/*
 * Generated by PEG.js 0.10.x with phpegjs plugin
 *
 * http://pegjs.majda.cz/
 */

namespace PhpPegJs;

/* Useful functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists("PhpPegJs\\chr_unicode")) {
    function chr_unicode($code) {
        return html_entity_decode("&#$code;", ENT_QUOTES, "UTF-8");
    }
}
/* ord_unicode - get unicode char code from string */
if (!function_exists("PhpPegJs\\ord_unicode")) {
    function ord_unicode($character) {
        if (strlen($character) === 1) {
            return ord($character);
        }
        $json = json_encode($character);
        $utf16_1 = hexdec(substr($json, 3, 4));
        if (substr($json, 7, 2) === "\u") {
            $utf16_2 = hexdec(substr($json, 9, 4));
            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        } else {
            return $utf16_1;
        }
    }
}
/* peg_regex_test - multibyte regex test */
if (!function_exists("PhpPegJs\\peg_regex_test")) {
    function peg_regex_test($pattern, $string) {
        if (substr($pattern, -1) == "i") {
            return mb_eregi(substr($pattern, 1, -2), $string);
        } else {
            return mb_ereg(substr($pattern, 1, -1), $string);
        }
    }
}

/* Syntax error exception */
if (!class_exists("PhpPegJs\\SyntaxError", false)) {
    class SyntaxError extends \Exception {
        public $expected;
        public $found;
        public $grammarOffset;
        public $grammarLine;
        public $grammarColumn;
        public $name;
        public function __construct($message, $expected, $found, $offset, $line, $column) {
            parent::__construct($message, 0);
            $this->expected = $expected;
            $this->found = $found;
            $this->grammarOffset = $offset;
            $this->grammarLine = $line;
            $this->grammarColumn = $column;
            $this->name = "SyntaxError";
        }
    }
}

class Parser {
    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = array();
    private $input_length         = 0;
    public $peg_cache = array();

    private function cleanup_state() {
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = array();
      $this->input_length         = 0;
      $this->peg_cache = array();
    }

    private function input_substr($start, $length) {
      if ($length === 1 && $start < $this->input_length) {
        return $this->input[$start];
      }
      $substr = '';
      $max = min($start + $length, $this->input_length);
      for ($i = $start; $i < $max; $i++) {
        $substr .= $this->input[$i];
      }
      return $substr;
    }


    private function text() {
      return substr($this->input, $this->peg_reportedPos, $this->peg_reportedPos + $this->peg_currPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_advancePos(&$details, $startPos, $endPos) {
      for ($p = $startPos; $p < $endPos; $p++) {
        $ch = $this->input_substr($p, 1);
        if ($ch === "\n") {
          if (!$details["seenCR"]) { $details["line"]++; }
          $details["column"] = 1;
          $details["seenCR"] = false;
        } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
          $details["line"]++;
          $details["column"] = 1;
          $details["seenCR"] = true;
        } else {
          $details["column"]++;
          $details["seenCR"] = false;
        }
      }
    }

    private function peg_computePosDetails($pos) {
      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException_expectedComparator($a, $b) {
      if ($a["description"] < $b["description"]) {
        return -1;
      } else if ($a["description"] > $b["description"]) {
        return 1;
      } else {
        return 0;
      }
    }

    private function peg_buildException($message, $expected, $pos) {
      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < $this->input_length ? $this->input[$pos] : null;

      if ($expected !== null) {
        usort($expected, array($this, "peg_buildException_expectedComparator"));
        $i = 1;
        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      }

      if ($message === null) {
        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? json_encode($found) : "end of input";

        $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      }

      return new SyntaxError(
        $message,
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;
    private $peg_c25;
    private $peg_c26;
    private $peg_c27;
    private $peg_c28;
    private $peg_c29;
    private $peg_c30;
    private $peg_c31;
    private $peg_c32;
    private $peg_c33;
    private $peg_c34;
    private $peg_c35;
    private $peg_c36;
    private $peg_c37;
    private $peg_c38;
    private $peg_c39;
    private $peg_c40;
    private $peg_c41;
    private $peg_c42;
    private $peg_c43;
    private $peg_c44;
    private $peg_c45;
    private $peg_c46;
    private $peg_c47;
    private $peg_c48;
    private $peg_c49;
    private $peg_c50;
    private $peg_c51;
    private $peg_c52;
    private $peg_c53;
    private $peg_c54;
    private $peg_c55;
    private $peg_c56;
    private $peg_c57;
    private $peg_c58;
    private $peg_c59;
    private $peg_c60;
    private $peg_c61;
    private $peg_c62;
    private $peg_c63;
    private $peg_c64;
    private $peg_c65;
    private $peg_c66;
    private $peg_c67;
    private $peg_c68;
    private $peg_c69;
    private $peg_c70;
    private $peg_c71;
    private $peg_c72;
    private $peg_c73;
    private $peg_c74;
    private $peg_c75;
    private $peg_c76;
    private $peg_c77;
    private $peg_c78;
    private $peg_c79;
    private $peg_c80;
    private $peg_c81;
    private $peg_c82;
    private $peg_c83;
    private $peg_c84;
    private $peg_c85;
    private $peg_c86;
    private $peg_c87;
    private $peg_c88;
    private $peg_c89;
    private $peg_c90;
    private $peg_c91;
    private $peg_c92;
    private $peg_c93;
    private $peg_c94;
    private $peg_c95;
    private $peg_c96;
    private $peg_c97;
    private $peg_c98;
    private $peg_c99;
    private $peg_c100;
    private $peg_c101;
    private $peg_c102;
    private $peg_c103;
    private $peg_c104;
    private $peg_c105;
    private $peg_c106;
    private $peg_c107;
    private $peg_c108;
    private $peg_c109;
    private $peg_c110;
    private $peg_c111;
    private $peg_c112;
    private $peg_c113;
    private $peg_c114;
    private $peg_c115;
    private $peg_c116;
    private $peg_c117;
    private $peg_c118;
    private $peg_c119;
    private $peg_c120;
    private $peg_c121;
    private $peg_c122;
    private $peg_c123;
    private $peg_c124;
    private $peg_c125;
    private $peg_c126;
    private $peg_c127;
    private $peg_c128;
    private $peg_c129;
    private $peg_c130;
    private $peg_c131;
    private $peg_c132;
    private $peg_c133;
    private $peg_c134;
    private $peg_c135;
    private $peg_c136;
    private $peg_c137;
    private $peg_c138;
    private $peg_c139;
    private $peg_c140;
    private $peg_c141;
    private $peg_c142;
    private $peg_c143;
    private $peg_c144;
    private $peg_c145;
    private $peg_c146;
    private $peg_c147;
    private $peg_c148;
    private $peg_c149;
    private $peg_c150;

    private function peg_f0($blocks) {
    		return new \Deval\ConcatBlock ($blocks);
    	}
    private function peg_f1($command) {
    		return $command;
    	}
    private function peg_f2($plain) {
    		return new \Deval\PlainBlock ($plain);
    	}
    private function peg_f3($chars) {
    		return implode ('', $chars);
    	}
    private function peg_f4($brace, $char) {
    		return $brace . $char;
    	}
    private function peg_f5($brace) {
    		return $brace;
    	}
    private function peg_f6($expression) {
    		return new \Deval\EchoBlock ($expression);
    	}
    private function peg_f7($path, $blocks) {
    		$bodies = array_map (function ($b) { return $b[1]; }, $blocks);
    		$names = array_map (function ($b) { return $b[0]; }, $blocks);

    		return \Deval\Compiler::parse_file ($path, array_combine ($names, $bodies));
    	}
    private function peg_f8($name, $body) {
    		return array ($name, $body);
    	}
    private function peg_f9($key, $value, $source, $loop, $empty) {
    		return new \Deval\ForBlock ($source, $key, $value, $loop, $empty ?: new \Deval\VoidBlock ());
    	}
    private function peg_f10($body) {
    		return $body;
    	}
    private function peg_f11($key) {
    		return $key;
    	}
    private function peg_f12($condition, $body, $branches, $fallback) {
    		return new \Deval\IfBlock (array_merge (array (array ($condition, $body)), $branches), $fallback ?: new \Deval\VoidBlock ());
    	}
    private function peg_f13($condition, $body) {
    		return array ($condition, $body);
    	}
    private function peg_f14($path) {
    		return \Deval\Compiler::parse_file ($path);
    	}
    private function peg_f15($name) {
    		return new \Deval\LabelBlock ($name);
    	}
    private function peg_f16($assignments, $body) {
    		return new \Deval\LetBlock ($assignments, $body);
    	}
    private function peg_f17($head, $token) { return $token; }
    private function peg_f18($head, $tail) {
    		return array_merge (array ($head), $tail);
    	}
    private function peg_f19($name, $value) {
    		return array ($name, $value);
    	}
    private function peg_f20($body) {
    		return new \Deval\UnwrapBlock ($body);
    	}
    private function peg_f21($value, $body) {
    		return $body->wrap ($value);
    	}
    private function peg_f22($chars) { return implode ('', $chars); }
    private function peg_f23($digits) { return chr_unicode (hexdec ($digits)); }
    private function peg_f24($sequence) {
    		return $sequence;
    	}
    private function peg_f25($head, $rhs) { return $rhs; }
    private function peg_f26($head, $tail) {
    		return array_reduce ($tail, function ($lhs, $rhs)
    		{
    			return new \Deval\BinaryExpression ('||', $lhs, $rhs);
    		}, $head);
    	}
    private function peg_f27($head, $tail) {
    		return array_reduce ($tail, function ($lhs, $rhs)
    		{
    			return new \Deval\BinaryExpression ('&&', $lhs, $rhs);
    		}, $head);
    	}
    private function peg_f28($head, $operator, $next) { return array ($operator, $next); }
    private function peg_f29($head, $tail) {
    		return array_reduce ($tail, function ($lhs, $next)
    		{
    			return new \Deval\BinaryExpression ($next[0], $lhs, $next[1]);
    		}, $head);
    	}
    private function peg_f30($moment, $operand) {
    		return new \Deval\DeferExpression ($moment, $operand);
    	}
    private function peg_f31($operator, $operand) {
    		return new \Deval\UnaryExpression ($operator, $operand);
    	}
    private function peg_f32() {
    		return false;
    	}
    private function peg_f33() {
    		return true;
    	}
    private function peg_f34($expression, $token) { return $token; }
    private function peg_f35($expression, $operators) {
    		foreach ($operators as $operator)
    			$expression = $operator ($expression);

    		return $expression;
    	}
    private function peg_f36() {
    		return function ($expression)
    		{
    			return new \Deval\InvokeExpression ($expression, array ());
    		};
    	}
    private function peg_f37($head, $tail) {
    		$arguments = array_merge (array ($head), $tail);

    		return function ($expression) use ($arguments)
    		{
    			return new \Deval\InvokeExpression ($expression, $arguments);
    		};
    	}
    private function peg_f38($index) {
    		return function ($expression) use ($index)
    		{
    			return new \Deval\MemberExpression ($expression, $index);
    		};
    	}
    private function peg_f39($index) {
    		return function ($expression) use ($index)
    		{
    			return new \Deval\MemberExpression ($expression, new \Deval\ConstantExpression ($index));
    		};
    	}
    private function peg_f40($names, $body) {
    		return new \Deval\LambdaExpression ($names, $body);
    	}
    private function peg_f41($value) {
    		return new \Deval\ArrayExpression ($value);
    	}
    private function peg_f42($value) {
    		return new \Deval\ConstantExpression ($value);
    	}
    private function peg_f43($value) {
    		return new \Deval\SymbolExpression ($value);
    	}
    private function peg_f44($value) {
    		return new \Deval\GroupExpression ($value);
    	}
    private function peg_f45() {
    		return array ();
    	}
    private function peg_f46($key, $value) {
    		return array ($key, $value);
    	}
    private function peg_f47($value) {
    		return array (null, $value);
    	}
    private function peg_f48($digits) {
    		return (float)$digits;
    	}
    private function peg_f49($digits) {
    		return (int)$digits;
    	}
    private function peg_f50() {
    		return null;
    	}
    private function peg_f51() { return "\b"; }
    private function peg_f52() { return "\f"; }
    private function peg_f53() { return "\n"; }
    private function peg_f54() { return "\r"; }
    private function peg_f55() { return "\t"; }

    private function peg_parseDocument() {

      $key    = $this->peg_currPos * 55 + 0;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_parseContent();

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseContent() {

      $key    = $this->peg_currPos * 55 + 1;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseBlock();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseBlock();
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f0($s1);
      }
      $s0 = $s1;

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseBlock() {

      $key    = $this->peg_currPos * 55 + 2;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseBlockBegin();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseCommand();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseBlockEnd();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f1($s3);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsePlain();
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f2($s1);
        }
        $s0 = $s1;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseBlockBegin() {

      $key    = $this->peg_currPos * 55 + 3;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c0) {
        $s0 = $this->peg_c0;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c1);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseBlockEnd() {

      $key    = $this->peg_currPos * 55 + 4;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c2) {
        $s0 = $this->peg_c2;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c3);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parse_() {

      $key    = $this->peg_currPos * 55 + 5;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = array();
      $s1 = $this->peg_parseComment();
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_parseBlank();
      }
      while ($s1 !== $this->peg_FAILED) {
        $s0[] = $s1;
        $s1 = $this->peg_parseComment();
        if ($s1 === $this->peg_FAILED) {
          $s1 = $this->peg_parseBlank();
        }
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c4);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseComment() {

      $key    = $this->peg_currPos * 55 + 6;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c5) {
        $s1 = $this->peg_c5;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c6);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        if (peg_regex_test($this->peg_c7, $this->input_substr($this->peg_currPos, 1))) {
          $s3 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c8);
          }
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          if (peg_regex_test($this->peg_c7, $this->input_substr($this->peg_currPos, 1))) {
            $s3 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c8);
            }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = array();
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c9) {
            $s4 = $this->peg_c9;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c10);
            }
          }
          if ($s4 !== $this->peg_FAILED) {
            while ($s4 !== $this->peg_FAILED) {
              $s3[] = $s4;
              if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c9) {
                $s4 = $this->peg_c9;
                $this->peg_currPos++;
              } else {
                $s4 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c10);
                }
              }
            }
          } else {
            $s3 = $this->peg_FAILED;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = array();
            $s5 = $this->peg_currPos;
            if (peg_regex_test($this->peg_c11, $this->input_substr($this->peg_currPos, 1))) {
              $s6 = $this->input_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c12);
              }
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = array();
              if (peg_regex_test($this->peg_c7, $this->input_substr($this->peg_currPos, 1))) {
                $s8 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
              } else {
                $s8 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c8);
                }
              }
              while ($s8 !== $this->peg_FAILED) {
                $s7[] = $s8;
                if (peg_regex_test($this->peg_c7, $this->input_substr($this->peg_currPos, 1))) {
                  $s8 = $this->input_substr($this->peg_currPos, 1);
                  $this->peg_currPos++;
                } else {
                  $s8 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c8);
                  }
                }
              }
              if ($s7 !== $this->peg_FAILED) {
                $s8 = array();
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c9) {
                  $s9 = $this->peg_c9;
                  $this->peg_currPos++;
                } else {
                  $s9 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c10);
                  }
                }
                if ($s9 !== $this->peg_FAILED) {
                  while ($s9 !== $this->peg_FAILED) {
                    $s8[] = $s9;
                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c9) {
                      $s9 = $this->peg_c9;
                      $this->peg_currPos++;
                    } else {
                      $s9 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c10);
                      }
                    }
                  }
                } else {
                  $s8 = $this->peg_FAILED;
                }
                if ($s8 !== $this->peg_FAILED) {
                  $s6 = array($s6, $s7, $s8);
                  $s5 = $s6;
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s5;
              $s5 = $this->peg_FAILED;
            }
            while ($s5 !== $this->peg_FAILED) {
              $s4[] = $s5;
              $s5 = $this->peg_currPos;
              if (peg_regex_test($this->peg_c11, $this->input_substr($this->peg_currPos, 1))) {
                $s6 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c12);
                }
              }
              if ($s6 !== $this->peg_FAILED) {
                $s7 = array();
                if (peg_regex_test($this->peg_c7, $this->input_substr($this->peg_currPos, 1))) {
                  $s8 = $this->input_substr($this->peg_currPos, 1);
                  $this->peg_currPos++;
                } else {
                  $s8 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c8);
                  }
                }
                while ($s8 !== $this->peg_FAILED) {
                  $s7[] = $s8;
                  if (peg_regex_test($this->peg_c7, $this->input_substr($this->peg_currPos, 1))) {
                    $s8 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                  } else {
                    $s8 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c8);
                    }
                  }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = array();
                  if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c9) {
                    $s9 = $this->peg_c9;
                    $this->peg_currPos++;
                  } else {
                    $s9 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c10);
                    }
                  }
                  if ($s9 !== $this->peg_FAILED) {
                    while ($s9 !== $this->peg_FAILED) {
                      $s8[] = $s9;
                      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c9) {
                        $s9 = $this->peg_c9;
                        $this->peg_currPos++;
                      } else {
                        $s9 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c10);
                        }
                      }
                    }
                  } else {
                    $s8 = $this->peg_FAILED;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s6 = array($s6, $s7, $s8);
                    $s5 = $s6;
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c13) {
                $s5 = $this->peg_c13;
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c14);
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s1 = array($s1, $s2, $s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseBlank() {

      $key    = $this->peg_currPos * 55 + 7;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      if (peg_regex_test($this->peg_c16, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c17);
        }
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c15);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parsePlain() {

      $key    = $this->peg_currPos * 55 + 8;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parsePlainCharacter();
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_parsePlainCharacter();
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f3($s1);
      }
      $s0 = $s1;

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parsePlainCharacter() {

      $key    = $this->peg_currPos * 55 + 9;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
        $s1 = $this->peg_c18;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c19);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        if (peg_regex_test($this->peg_c20, $this->input_substr($this->peg_currPos, 1))) {
          $s2 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c21);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f4($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
          $s1 = $this->peg_c18;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c19);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_currPos;
          $this->peg_silentFails++;
          if ($this->input_length > $this->peg_currPos) {
            $s3 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c22);
            }
          }
          $this->peg_silentFails--;
          if ($s3 === $this->peg_FAILED) {
            $s2 = null;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f5($s1);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          if (peg_regex_test($this->peg_c20, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c21);
            }
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommand() {

      $key    = $this->peg_currPos * 55 + 10;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_parseCommandEcho();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseCommandExtend();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseCommandFor();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseCommandIf();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseCommandInclude();
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parseCommandLabel();
                if ($s0 === $this->peg_FAILED) {
                  $s0 = $this->peg_parseCommandLet();
                  if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_parseCommandUnwrap();
                    if ($s0 === $this->peg_FAILED) {
                      $s0 = $this->peg_parseCommandWrap();
                    }
                  }
                }
              }
            }
          }
        }
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c23);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandEcho() {

      $key    = $this->peg_currPos * 55 + 11;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c25) {
        $s1 = $this->peg_c25;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c26);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseExpressionBooleanOr();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f6($s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c24);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandExtend() {

      $key    = $this->peg_currPos * 55 + 12;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 6) === $this->peg_c28) {
        $s1 = $this->peg_c28;
        $this->peg_currPos += 6;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c29);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parsePath();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseBlockEnd();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = array();
                  $s8 = $this->peg_parseCommandExtendBlock();
                  while ($s8 !== $this->peg_FAILED) {
                    $s7[] = $s8;
                    $s8 = $this->peg_parseCommandExtendBlock();
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parseBlockBegin();
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parse_();
                      if ($s9 !== $this->peg_FAILED) {
                        if ($this->input_substr($this->peg_currPos, 3) === $this->peg_c30) {
                          $s10 = $this->peg_c30;
                          $this->peg_currPos += 3;
                        } else {
                          $s10 = $this->peg_FAILED;
                          if ($this->peg_silentFails === 0) {
                              $this->peg_fail($this->peg_c31);
                          }
                        }
                        if ($s10 !== $this->peg_FAILED) {
                          $this->peg_reportedPos = $s0;
                          $s1 = $this->peg_f7($s3, $s7);
                          $s0 = $s1;
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c27);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandExtendBlock() {

      $key    = $this->peg_currPos * 55 + 13;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseBlockBegin();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 5) === $this->peg_c32) {
            $s3 = $this->peg_c32;
            $this->peg_currPos += 5;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c33);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseSymbol();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseBlockEnd();
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parseContent();
                    if ($s8 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = $this->peg_f8($s5, $s8);
                      $s0 = $s1;
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandFor() {

      $key    = $this->peg_currPos * 55 + 14;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 3) === $this->peg_c35) {
        $s1 = $this->peg_c35;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c36);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseCommandForKey();
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseSymbol();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parse_();
              if ($s5 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c37) {
                  $s6 = $this->peg_c37;
                  $this->peg_currPos += 2;
                } else {
                  $s6 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c38);
                  }
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parse_();
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parseExpressionBooleanOr();
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parse_();
                      if ($s9 !== $this->peg_FAILED) {
                        $s10 = $this->peg_parseBlockEnd();
                        if ($s10 !== $this->peg_FAILED) {
                          $s11 = $this->peg_parseContent();
                          if ($s11 !== $this->peg_FAILED) {
                            $s12 = $this->peg_parseCommandForEmpty();
                            if ($s12 === $this->peg_FAILED) {
                              $s12 = null;
                            }
                            if ($s12 !== $this->peg_FAILED) {
                              $s13 = $this->peg_parseBlockBegin();
                              if ($s13 !== $this->peg_FAILED) {
                                $s14 = $this->peg_parse_();
                                if ($s14 !== $this->peg_FAILED) {
                                  if ($this->input_substr($this->peg_currPos, 3) === $this->peg_c30) {
                                    $s15 = $this->peg_c30;
                                    $this->peg_currPos += 3;
                                  } else {
                                    $s15 = $this->peg_FAILED;
                                    if ($this->peg_silentFails === 0) {
                                        $this->peg_fail($this->peg_c31);
                                    }
                                  }
                                  if ($s15 !== $this->peg_FAILED) {
                                    $this->peg_reportedPos = $s0;
                                    $s1 = $this->peg_f9($s3, $s4, $s8, $s11, $s12);
                                    $s0 = $s1;
                                  } else {
                                    $this->peg_currPos = $s0;
                                    $s0 = $this->peg_FAILED;
                                  }
                                } else {
                                  $this->peg_currPos = $s0;
                                  $s0 = $this->peg_FAILED;
                                }
                              } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                              }
                            } else {
                              $this->peg_currPos = $s0;
                              $s0 = $this->peg_FAILED;
                            }
                          } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                          }
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c34);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandForEmpty() {

      $key    = $this->peg_currPos * 55 + 15;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseBlockBegin();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 5) === $this->peg_c39) {
            $s3 = $this->peg_c39;
            $this->peg_currPos += 5;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c40);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseBlockEnd();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseContent();
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f10($s6);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandForKey() {

      $key    = $this->peg_currPos * 55 + 16;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseSymbol();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c41) {
            $s3 = $this->peg_c41;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c42);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f11($s1);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandIf() {

      $key    = $this->peg_currPos * 55 + 17;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c44) {
        $s1 = $this->peg_c44;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c45);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseExpressionBooleanOr();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseBlockEnd();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseContent();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = array();
                  $s8 = $this->peg_parseCommandIfElseif();
                  while ($s8 !== $this->peg_FAILED) {
                    $s7[] = $s8;
                    $s8 = $this->peg_parseCommandIfElseif();
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parseCommandIfElse();
                    if ($s8 === $this->peg_FAILED) {
                      $s8 = null;
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parseBlockBegin();
                      if ($s9 !== $this->peg_FAILED) {
                        $s10 = $this->peg_parse_();
                        if ($s10 !== $this->peg_FAILED) {
                          if ($this->input_substr($this->peg_currPos, 3) === $this->peg_c30) {
                            $s11 = $this->peg_c30;
                            $this->peg_currPos += 3;
                          } else {
                            $s11 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_c31);
                            }
                          }
                          if ($s11 !== $this->peg_FAILED) {
                            $this->peg_reportedPos = $s0;
                            $s1 = $this->peg_f12($s3, $s6, $s7, $s8);
                            $s0 = $s1;
                          } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                          }
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c43);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandIfElseif() {

      $key    = $this->peg_currPos * 55 + 18;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseBlockBegin();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 4) === $this->peg_c46) {
            $s3 = $this->peg_c46;
            $this->peg_currPos += 4;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c47);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c44) {
                $s5 = $this->peg_c44;
                $this->peg_currPos += 2;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c45);
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseExpressionBooleanOr();
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parse_();
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parseBlockEnd();
                      if ($s9 !== $this->peg_FAILED) {
                        $s10 = $this->peg_parseContent();
                        if ($s10 !== $this->peg_FAILED) {
                          $this->peg_reportedPos = $s0;
                          $s1 = $this->peg_f13($s7, $s10);
                          $s0 = $s1;
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandIfElse() {

      $key    = $this->peg_currPos * 55 + 19;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseBlockBegin();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 4) === $this->peg_c46) {
            $s3 = $this->peg_c46;
            $this->peg_currPos += 4;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c47);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseBlockEnd();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseContent();
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f10($s6);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandInclude() {

      $key    = $this->peg_currPos * 55 + 20;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 7) === $this->peg_c49) {
        $s1 = $this->peg_c49;
        $this->peg_currPos += 7;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c50);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parsePath();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f14($s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c48);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandLabel() {

      $key    = $this->peg_currPos * 55 + 21;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 5) === $this->peg_c51) {
        $s1 = $this->peg_c51;
        $this->peg_currPos += 5;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c52);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseSymbol();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f15($s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandLet() {

      $key    = $this->peg_currPos * 55 + 22;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 3) === $this->peg_c54) {
        $s1 = $this->peg_c54;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c55);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseCommandLetAssignments();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseBlockEnd();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseContent();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseBlockBegin();
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parse_();
                    if ($s8 !== $this->peg_FAILED) {
                      if ($this->input_substr($this->peg_currPos, 3) === $this->peg_c30) {
                        $s9 = $this->peg_c30;
                        $this->peg_currPos += 3;
                      } else {
                        $s9 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c31);
                        }
                      }
                      if ($s9 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = $this->peg_f16($s3, $s6);
                        $s0 = $s1;
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c53);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandLetAssignments() {

      $key    = $this->peg_currPos * 55 + 23;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseCommandLetAssignmentsPair();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = array();
          $s4 = $this->peg_currPos;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c41) {
            $s5 = $this->peg_c41;
            $this->peg_currPos++;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c42);
            }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseCommandLetAssignmentsPair();
              if ($s7 !== $this->peg_FAILED) {
                $s8 = $this->peg_parse_();
                if ($s8 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s4;
                  $s5 = $this->peg_f17($s1, $s7);
                  $s4 = $s5;
                } else {
                  $this->peg_currPos = $s4;
                  $s4 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_FAILED;
          }
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c41) {
              $s5 = $this->peg_c41;
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c42);
              }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseCommandLetAssignmentsPair();
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s4;
                    $s5 = $this->peg_f17($s1, $s7);
                    $s4 = $s5;
                  } else {
                    $this->peg_currPos = $s4;
                    $s4 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s4;
                  $s4 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f18($s1, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c56);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandLetAssignmentsPair() {

      $key    = $this->peg_currPos * 55 + 24;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseSymbol();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c58) {
            $s3 = $this->peg_c58;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c59);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseExpressionBooleanOr();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f19($s1, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c57);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandUnwrap() {

      $key    = $this->peg_currPos * 55 + 25;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 6) === $this->peg_c61) {
        $s1 = $this->peg_c61;
        $this->peg_currPos += 6;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c62);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseBlockEnd();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseContent();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseBlockBegin();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 !== $this->peg_FAILED) {
                  if ($this->input_substr($this->peg_currPos, 3) === $this->peg_c30) {
                    $s7 = $this->peg_c30;
                    $this->peg_currPos += 3;
                  } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c31);
                    }
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f20($s4);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c60);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCommandWrap() {

      $key    = $this->peg_currPos * 55 + 26;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 4) === $this->peg_c64) {
        $s1 = $this->peg_c64;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c65);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseExpressionBooleanOr();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseBlockEnd();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseContent();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseBlockBegin();
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parse_();
                    if ($s8 !== $this->peg_FAILED) {
                      if ($this->input_substr($this->peg_currPos, 3) === $this->peg_c30) {
                        $s9 = $this->peg_c30;
                        $this->peg_currPos += 3;
                      } else {
                        $s9 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c31);
                        }
                      }
                      if ($s9 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = $this->peg_f21($s3, $s6);
                        $s0 = $s1;
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c63);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parsePath() {

      $key    = $this->peg_currPos * 55 + 27;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parsePathChar();
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_parsePathChar();
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f22($s1);
      }
      $s0 = $s1;
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c66);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parsePathChar() {

      $key    = $this->peg_currPos * 55 + 28;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if (peg_regex_test($this->peg_c67, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c68);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c69) {
          $s1 = $this->peg_c69;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c70);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c69) {
            $s2 = $this->peg_c69;
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c70);
            }
          }
          if ($s2 === $this->peg_FAILED) {
            $s2 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c71) {
              $s3 = $this->peg_c71;
              $this->peg_currPos++;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c72);
              }
            }
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_currPos;
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parseHex();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseHex();
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parseHex();
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseHex();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
              }
              if ($s5 !== $this->peg_FAILED) {
                $s4 = $this->input_substr($s4, $this->peg_currPos - $s4);
              } else {
                $s4 = $s5;
              }
              if ($s4 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s2;
                $s3 = $this->peg_f23($s4);
                $s2 = $s3;
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f24($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseSymbol() {

      $key    = $this->peg_currPos * 55 + 29;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      if (peg_regex_test($this->peg_c74, $this->input_substr($this->peg_currPos, 1))) {
        $s2 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c75);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        $s3 = array();
        if (peg_regex_test($this->peg_c76, $this->input_substr($this->peg_currPos, 1))) {
          $s4 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c77);
          }
        }
        while ($s4 !== $this->peg_FAILED) {
          $s3[] = $s4;
          if (peg_regex_test($this->peg_c76, $this->input_substr($this->peg_currPos, 1))) {
            $s4 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c77);
            }
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          $s2 = array($s2, $s3);
          $s1 = $s2;
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
      } else {
        $s0 = $s1;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c73);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionBooleanOr() {

      $key    = $this->peg_currPos * 55 + 30;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseExpressionBooleanAnd();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c78) {
            $s5 = $this->peg_c78;
            $this->peg_currPos += 2;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c79);
            }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseExpressionBooleanOr();
              if ($s7 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s3;
                $s4 = $this->peg_f25($s1, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_FAILED;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c78) {
              $s5 = $this->peg_c78;
              $this->peg_currPos += 2;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c79);
              }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseExpressionBooleanOr();
                if ($s7 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s3;
                  $s4 = $this->peg_f25($s1, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f26($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseExpressionBooleanAnd();
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionBooleanAnd() {

      $key    = $this->peg_currPos * 55 + 31;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseExpressionCompare();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c80) {
            $s5 = $this->peg_c80;
            $this->peg_currPos += 2;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c81);
            }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseExpressionBooleanAnd();
              if ($s7 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s3;
                $s4 = $this->peg_f25($s1, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_FAILED;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c80) {
              $s5 = $this->peg_c80;
              $this->peg_currPos += 2;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c81);
              }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseExpressionBooleanAnd();
                if ($s7 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s3;
                  $s4 = $this->peg_f25($s1, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f27($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseExpressionCompare();
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionCompare() {

      $key    = $this->peg_currPos * 55 + 32;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseExpressionMathAdd();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parseExpressionCompareOperator();
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseExpressionCompare();
              if ($s7 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s3;
                $s4 = $this->peg_f28($s1, $s5, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_FAILED;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseExpressionCompareOperator();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseExpressionCompare();
                if ($s7 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s3;
                  $s4 = $this->peg_f28($s1, $s5, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f29($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseExpressionMathAdd();
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionCompareOperator() {

      $key    = $this->peg_currPos * 55 + 33;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c82) {
        $s0 = $this->peg_c82;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c83);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c84) {
          $s0 = $this->peg_c84;
          $this->peg_currPos += 2;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c85);
          }
        }
        if ($s0 === $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c86) {
            $s0 = $this->peg_c86;
            $this->peg_currPos += 2;
          } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c87);
            }
          }
          if ($s0 === $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c88) {
              $s0 = $this->peg_c88;
              $this->peg_currPos++;
            } else {
              $s0 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c89);
              }
            }
            if ($s0 === $this->peg_FAILED) {
              if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c90) {
                $s0 = $this->peg_c90;
                $this->peg_currPos += 2;
              } else {
                $s0 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c91);
                }
              }
              if ($s0 === $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c92) {
                  $s0 = $this->peg_c92;
                  $this->peg_currPos++;
                } else {
                  $s0 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c93);
                  }
                }
              }
            }
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionMathAdd() {

      $key    = $this->peg_currPos * 55 + 34;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseExpressionMathMul();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parseExpressionMathAddOperator();
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseExpressionMathMul();
              if ($s7 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s3;
                $s4 = $this->peg_f28($s1, $s5, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_FAILED;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseExpressionMathAddOperator();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseExpressionMathMul();
                if ($s7 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s3;
                  $s4 = $this->peg_f28($s1, $s5, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f29($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseExpressionMathMul();
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionMathAddOperator() {

      $key    = $this->peg_currPos * 55 + 35;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c94) {
        $s0 = $this->peg_c94;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c95);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c96) {
          $s0 = $this->peg_c96;
          $this->peg_currPos++;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c97);
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionMathMul() {

      $key    = $this->peg_currPos * 55 + 36;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseExpressionPrefix();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parseExpressionMathMulOperator();
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseExpressionPrefix();
              if ($s7 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s3;
                $s4 = $this->peg_f28($s1, $s5, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_FAILED;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseExpressionMathMulOperator();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseExpressionPrefix();
                if ($s7 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s3;
                  $s4 = $this->peg_f28($s1, $s5, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f29($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseExpressionPrefix();
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionMathMulOperator() {

      $key    = $this->peg_currPos * 55 + 37;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c9) {
        $s0 = $this->peg_c9;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c10);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c13) {
          $s0 = $this->peg_c13;
          $this->peg_currPos++;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c14);
          }
        }
        if ($s0 === $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c98) {
            $s0 = $this->peg_c98;
            $this->peg_currPos++;
          } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c99);
            }
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionPrefix() {

      $key    = $this->peg_currPos * 55 + 38;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseExpressionPrefixMoment();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseExpressionPrefix();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f30($s1, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseExpressionPrefixOperator();
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseExpressionPrefix();
            if ($s3 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f31($s1, $s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseExpressionPostfix();
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionPrefixMoment() {

      $key    = $this->peg_currPos * 55 + 39;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 3) === $this->peg_c100) {
        $s1 = $this->peg_c100;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c101);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f32();
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 3) === $this->peg_c102) {
          $s1 = $this->peg_c102;
          $this->peg_currPos += 3;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c103);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f33();
        }
        $s0 = $s1;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionPrefixOperator() {

      $key    = $this->peg_currPos * 55 + 40;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c104) {
        $s0 = $this->peg_c104;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c105);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c106) {
          $s0 = $this->peg_c106;
          $this->peg_currPos++;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c107);
          }
        }
        if ($s0 === $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c94) {
            $s0 = $this->peg_c94;
            $this->peg_currPos++;
          } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c95);
            }
          }
          if ($s0 === $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c96) {
              $s0 = $this->peg_c96;
              $this->peg_currPos++;
            } else {
              $s0 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c97);
              }
            }
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionPostfix() {

      $key    = $this->peg_currPos * 55 + 41;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseExpressionPrimary();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parseExpressionPostfixOperator();
          if ($s5 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s3;
            $s4 = $this->peg_f34($s1, $s5);
            $s3 = $s4;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_FAILED;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseExpressionPostfixOperator();
            if ($s5 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s3;
              $s4 = $this->peg_f34($s1, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f35($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionPostfixOperator() {

      $key    = $this->peg_currPos * 55 + 42;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c108) {
        $s1 = $this->peg_c108;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c109);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c110) {
            $s3 = $this->peg_c110;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c111);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f36();
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c108) {
          $s1 = $this->peg_c108;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c109);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseExpressionBooleanOr();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parse_();
              if ($s4 !== $this->peg_FAILED) {
                $s5 = array();
                $s6 = $this->peg_currPos;
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c41) {
                  $s7 = $this->peg_c41;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c42);
                  }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseExpressionBooleanOr();
                    if ($s9 !== $this->peg_FAILED) {
                      $s10 = $this->peg_parse_();
                      if ($s10 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s6;
                        $s7 = $this->peg_f17($s3, $s9);
                        $s6 = $s7;
                      } else {
                        $this->peg_currPos = $s6;
                        $s6 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s6;
                      $s6 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s6;
                    $s6 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s6;
                  $s6 = $this->peg_FAILED;
                }
                while ($s6 !== $this->peg_FAILED) {
                  $s5[] = $s6;
                  $s6 = $this->peg_currPos;
                  if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c41) {
                    $s7 = $this->peg_c41;
                    $this->peg_currPos++;
                  } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c42);
                    }
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parse_();
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parseExpressionBooleanOr();
                      if ($s9 !== $this->peg_FAILED) {
                        $s10 = $this->peg_parse_();
                        if ($s10 !== $this->peg_FAILED) {
                          $this->peg_reportedPos = $s6;
                          $s7 = $this->peg_f17($s3, $s9);
                          $s6 = $s7;
                        } else {
                          $this->peg_currPos = $s6;
                          $s6 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s6;
                        $s6 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s6;
                      $s6 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s6;
                    $s6 = $this->peg_FAILED;
                  }
                }
                if ($s5 !== $this->peg_FAILED) {
                  if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c110) {
                    $s6 = $this->peg_c110;
                    $this->peg_currPos++;
                  } else {
                    $s6 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c111);
                    }
                  }
                  if ($s6 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f37($s3, $s5);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c112) {
            $s1 = $this->peg_c112;
            $this->peg_currPos++;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c113);
            }
          }
          if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_();
            if ($s2 !== $this->peg_FAILED) {
              $s3 = $this->peg_parseExpressionBooleanOr();
              if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_parse_();
                if ($s4 !== $this->peg_FAILED) {
                  if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c114) {
                    $s5 = $this->peg_c114;
                    $this->peg_currPos++;
                  } else {
                    $s5 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c115);
                    }
                  }
                  if ($s5 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f38($s3);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c116) {
              $s1 = $this->peg_c116;
              $this->peg_currPos++;
            } else {
              $s1 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c117);
              }
            }
            if ($s1 !== $this->peg_FAILED) {
              $s2 = $this->peg_parse_();
              if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parseSymbol();
                if ($s3 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f39($s3);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpressionPrimary() {

      $key    = $this->peg_currPos * 55 + 43;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseLambdaNames();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c118) {
            $s3 = $this->peg_c118;
            $this->peg_currPos += 2;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c119);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseExpressionBooleanOr();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f40($s1, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseArray();
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f41($s1);
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = $this->peg_parseScalar();
          if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f42($s1);
          }
          $s0 = $s1;
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parseSymbol();
            if ($s1 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f43($s1);
            }
            $s0 = $s1;
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_currPos;
              if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c108) {
                $s1 = $this->peg_c108;
                $this->peg_currPos++;
              } else {
                $s1 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c109);
                }
              }
              if ($s1 !== $this->peg_FAILED) {
                $s2 = $this->peg_parse_();
                if ($s2 !== $this->peg_FAILED) {
                  $s3 = $this->peg_parseExpressionBooleanOr();
                  if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parse_();
                    if ($s4 !== $this->peg_FAILED) {
                      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c110) {
                        $s5 = $this->peg_c110;
                        $this->peg_currPos++;
                      } else {
                        $s5 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c111);
                        }
                      }
                      if ($s5 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = $this->peg_f44($s3);
                        $s0 = $s1;
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            }
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseArray() {

      $key    = $this->peg_currPos * 55 + 44;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c112) {
        $s1 = $this->peg_c112;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c113);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c114) {
            $s3 = $this->peg_c114;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c115);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f45();
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c112) {
          $s1 = $this->peg_c112;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c113);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseArrayElement();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parse_();
              if ($s4 !== $this->peg_FAILED) {
                $s5 = array();
                $s6 = $this->peg_currPos;
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c41) {
                  $s7 = $this->peg_c41;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c42);
                  }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseArrayElement();
                    if ($s9 !== $this->peg_FAILED) {
                      $s10 = $this->peg_parse_();
                      if ($s10 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s6;
                        $s7 = $this->peg_f17($s3, $s9);
                        $s6 = $s7;
                      } else {
                        $this->peg_currPos = $s6;
                        $s6 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s6;
                      $s6 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s6;
                    $s6 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s6;
                  $s6 = $this->peg_FAILED;
                }
                while ($s6 !== $this->peg_FAILED) {
                  $s5[] = $s6;
                  $s6 = $this->peg_currPos;
                  if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c41) {
                    $s7 = $this->peg_c41;
                    $this->peg_currPos++;
                  } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c42);
                    }
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parse_();
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parseArrayElement();
                      if ($s9 !== $this->peg_FAILED) {
                        $s10 = $this->peg_parse_();
                        if ($s10 !== $this->peg_FAILED) {
                          $this->peg_reportedPos = $s6;
                          $s7 = $this->peg_f17($s3, $s9);
                          $s6 = $s7;
                        } else {
                          $this->peg_currPos = $s6;
                          $s6 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s6;
                        $s6 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s6;
                      $s6 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s6;
                    $s6 = $this->peg_FAILED;
                  }
                }
                if ($s5 !== $this->peg_FAILED) {
                  if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c114) {
                    $s6 = $this->peg_c114;
                    $this->peg_currPos++;
                  } else {
                    $s6 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c115);
                    }
                  }
                  if ($s6 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f18($s3, $s5);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseArrayElement() {

      $key    = $this->peg_currPos * 55 + 45;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseExpressionBooleanOr();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c120) {
            $s3 = $this->peg_c120;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c121);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseExpressionBooleanOr();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f46($s1, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseExpressionBooleanOr();
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f47($s1);
        }
        $s0 = $s1;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseLambdaNames() {

      $key    = $this->peg_currPos * 55 + 46;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c108) {
        $s1 = $this->peg_c108;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c109);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c110) {
            $s3 = $this->peg_c110;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c111);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f45();
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c108) {
          $s1 = $this->peg_c108;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c109);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseSymbol();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parse_();
              if ($s4 !== $this->peg_FAILED) {
                $s5 = array();
                $s6 = $this->peg_currPos;
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c41) {
                  $s7 = $this->peg_c41;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c42);
                  }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseSymbol();
                    if ($s9 !== $this->peg_FAILED) {
                      $s10 = $this->peg_parse_();
                      if ($s10 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s6;
                        $s7 = $this->peg_f17($s3, $s9);
                        $s6 = $s7;
                      } else {
                        $this->peg_currPos = $s6;
                        $s6 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s6;
                      $s6 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s6;
                    $s6 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s6;
                  $s6 = $this->peg_FAILED;
                }
                while ($s6 !== $this->peg_FAILED) {
                  $s5[] = $s6;
                  $s6 = $this->peg_currPos;
                  if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c41) {
                    $s7 = $this->peg_c41;
                    $this->peg_currPos++;
                  } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c42);
                    }
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parse_();
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parseSymbol();
                      if ($s9 !== $this->peg_FAILED) {
                        $s10 = $this->peg_parse_();
                        if ($s10 !== $this->peg_FAILED) {
                          $this->peg_reportedPos = $s6;
                          $s7 = $this->peg_f17($s3, $s9);
                          $s6 = $s7;
                        } else {
                          $this->peg_currPos = $s6;
                          $s6 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s6;
                        $s6 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s6;
                      $s6 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s6;
                    $s6 = $this->peg_FAILED;
                  }
                }
                if ($s5 !== $this->peg_FAILED) {
                  if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c110) {
                    $s6 = $this->peg_c110;
                    $this->peg_currPos++;
                  } else {
                    $s6 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c111);
                    }
                  }
                  if ($s6 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f18($s3, $s5);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseScalar() {

      $key    = $this->peg_currPos * 55 + 47;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_parseBoolean();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseFloat();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseInteger();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseNull();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseString();
            }
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseBoolean() {

      $key    = $this->peg_currPos * 55 + 48;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 5) === $this->peg_c123) {
        $s1 = $this->peg_c123;
        $this->peg_currPos += 5;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c124);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f32();
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 4) === $this->peg_c125) {
          $s1 = $this->peg_c125;
          $this->peg_currPos += 4;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c126);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f33();
        }
        $s0 = $s1;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c122);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseFloat() {

      $key    = $this->peg_currPos * 55 + 49;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = $this->peg_currPos;
      $s3 = array();
      if (peg_regex_test($this->peg_c128, $this->input_substr($this->peg_currPos, 1))) {
        $s4 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s4 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c129);
        }
      }
      while ($s4 !== $this->peg_FAILED) {
        $s3[] = $s4;
        if (peg_regex_test($this->peg_c128, $this->input_substr($this->peg_currPos, 1))) {
          $s4 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c129);
          }
        }
      }
      if ($s3 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c116) {
          $s4 = $this->peg_c116;
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c117);
          }
        }
        if ($s4 !== $this->peg_FAILED) {
          $s5 = array();
          if (peg_regex_test($this->peg_c128, $this->input_substr($this->peg_currPos, 1))) {
            $s6 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s6 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c129);
            }
          }
          if ($s6 !== $this->peg_FAILED) {
            while ($s6 !== $this->peg_FAILED) {
              $s5[] = $s6;
              if (peg_regex_test($this->peg_c128, $this->input_substr($this->peg_currPos, 1))) {
                $s6 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c129);
                }
              }
            }
          } else {
            $s5 = $this->peg_FAILED;
          }
          if ($s5 !== $this->peg_FAILED) {
            $s3 = array($s3, $s4, $s5);
            $s2 = $s3;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_FAILED;
      }
      if ($s2 !== $this->peg_FAILED) {
        $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
      } else {
        $s1 = $s2;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f48($s1);
      }
      $s0 = $s1;
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c127);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseInteger() {

      $key    = $this->peg_currPos * 55 + 50;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = array();
      if (peg_regex_test($this->peg_c128, $this->input_substr($this->peg_currPos, 1))) {
        $s3 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s3 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c129);
        }
      }
      if ($s3 !== $this->peg_FAILED) {
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          if (peg_regex_test($this->peg_c128, $this->input_substr($this->peg_currPos, 1))) {
            $s3 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c129);
            }
          }
        }
      } else {
        $s2 = $this->peg_FAILED;
      }
      if ($s2 !== $this->peg_FAILED) {
        $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
      } else {
        $s1 = $s2;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f49($s1);
      }
      $s0 = $s1;
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c130);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseNull() {

      $key    = $this->peg_currPos * 55 + 51;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 4) === $this->peg_c132) {
        $s1 = $this->peg_c132;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c133);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f50();
      }
      $s0 = $s1;
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c131);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseString() {

      $key    = $this->peg_currPos * 55 + 52;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c135) {
        $s1 = $this->peg_c135;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c136);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseStringChar();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseStringChar();
        }
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c135) {
            $s3 = $this->peg_c135;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c136);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f3($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c134);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseStringChar() {

      $key    = $this->peg_currPos * 55 + 53;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if (peg_regex_test($this->peg_c137, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c138);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c69) {
          $s1 = $this->peg_c69;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c70);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c135) {
            $s2 = $this->peg_c135;
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c136);
            }
          }
          if ($s2 === $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c69) {
              $s2 = $this->peg_c69;
              $this->peg_currPos++;
            } else {
              $s2 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c70);
              }
            }
            if ($s2 === $this->peg_FAILED) {
              if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c13) {
                $s2 = $this->peg_c13;
                $this->peg_currPos++;
              } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c14);
                }
              }
              if ($s2 === $this->peg_FAILED) {
                $s2 = $this->peg_currPos;
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c139) {
                  $s3 = $this->peg_c139;
                  $this->peg_currPos++;
                } else {
                  $s3 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c140);
                  }
                }
                if ($s3 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s2;
                  $s3 = $this->peg_f51();
                }
                $s2 = $s3;
                if ($s2 === $this->peg_FAILED) {
                  $s2 = $this->peg_currPos;
                  if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c141) {
                    $s3 = $this->peg_c141;
                    $this->peg_currPos++;
                  } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c142);
                    }
                  }
                  if ($s3 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s2;
                    $s3 = $this->peg_f52();
                  }
                  $s2 = $s3;
                  if ($s2 === $this->peg_FAILED) {
                    $s2 = $this->peg_currPos;
                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c143) {
                      $s3 = $this->peg_c143;
                      $this->peg_currPos++;
                    } else {
                      $s3 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c144);
                      }
                    }
                    if ($s3 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s2;
                      $s3 = $this->peg_f53();
                    }
                    $s2 = $s3;
                    if ($s2 === $this->peg_FAILED) {
                      $s2 = $this->peg_currPos;
                      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c145) {
                        $s3 = $this->peg_c145;
                        $this->peg_currPos++;
                      } else {
                        $s3 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c146);
                        }
                      }
                      if ($s3 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s2;
                        $s3 = $this->peg_f54();
                      }
                      $s2 = $s3;
                      if ($s2 === $this->peg_FAILED) {
                        $s2 = $this->peg_currPos;
                        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c147) {
                          $s3 = $this->peg_c147;
                          $this->peg_currPos++;
                        } else {
                          $s3 = $this->peg_FAILED;
                          if ($this->peg_silentFails === 0) {
                              $this->peg_fail($this->peg_c148);
                          }
                        }
                        if ($s3 !== $this->peg_FAILED) {
                          $this->peg_reportedPos = $s2;
                          $s3 = $this->peg_f55();
                        }
                        $s2 = $s3;
                        if ($s2 === $this->peg_FAILED) {
                          $s2 = $this->peg_currPos;
                          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c71) {
                            $s3 = $this->peg_c71;
                            $this->peg_currPos++;
                          } else {
                            $s3 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_c72);
                            }
                          }
                          if ($s3 !== $this->peg_FAILED) {
                            $s4 = $this->peg_currPos;
                            $s5 = $this->peg_currPos;
                            $s6 = $this->peg_parseHex();
                            if ($s6 !== $this->peg_FAILED) {
                              $s7 = $this->peg_parseHex();
                              if ($s7 !== $this->peg_FAILED) {
                                $s8 = $this->peg_parseHex();
                                if ($s8 !== $this->peg_FAILED) {
                                  $s9 = $this->peg_parseHex();
                                  if ($s9 !== $this->peg_FAILED) {
                                    $s6 = array($s6, $s7, $s8, $s9);
                                    $s5 = $s6;
                                  } else {
                                    $this->peg_currPos = $s5;
                                    $s5 = $this->peg_FAILED;
                                  }
                                } else {
                                  $this->peg_currPos = $s5;
                                  $s5 = $this->peg_FAILED;
                                }
                              } else {
                                $this->peg_currPos = $s5;
                                $s5 = $this->peg_FAILED;
                              }
                            } else {
                              $this->peg_currPos = $s5;
                              $s5 = $this->peg_FAILED;
                            }
                            if ($s5 !== $this->peg_FAILED) {
                              $s4 = $this->input_substr($s4, $this->peg_currPos - $s4);
                            } else {
                              $s4 = $s5;
                            }
                            if ($s4 !== $this->peg_FAILED) {
                              $this->peg_reportedPos = $s2;
                              $s3 = $this->peg_f23($s4);
                              $s2 = $s3;
                            } else {
                              $this->peg_currPos = $s2;
                              $s2 = $this->peg_FAILED;
                            }
                          } else {
                            $this->peg_currPos = $s2;
                            $s2 = $this->peg_FAILED;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f24($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseHex() {

      $key    = $this->peg_currPos * 55 + 54;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if (peg_regex_test($this->peg_c149, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c150);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();

    if (is_array($input)) {
        $this->input = $input;
    } else {
        preg_match_all("/./us", $input, $match);
        $this->input = $match[0];
    }
    $this->input_length = count($this->input);

    $old_regex_encoding = mb_regex_encoding();
    mb_regex_encoding("UTF-8");

    $this->peg_FAILED = new \stdClass;
    $this->peg_c0 = "{{";
    $this->peg_c1 = array( "type" => "literal", "value" => "{{", "description" => "\"{{\"" );
    $this->peg_c2 = "}}";
    $this->peg_c3 = array( "type" => "literal", "value" => "}}", "description" => "\"}}\"" );
    $this->peg_c4 = array("type" => "other", "description" => "ignore" );
    $this->peg_c5 = "/*";
    $this->peg_c6 = array( "type" => "literal", "value" => "/*", "description" => "\"/*\"" );
    $this->peg_c7 = "/^[^*]/";
    $this->peg_c8 = array( "type" => "class", "value" => "[*]", "description" => "[*]" );
    $this->peg_c9 = "*";
    $this->peg_c10 = array( "type" => "literal", "value" => "*", "description" => "\"*\"" );
    $this->peg_c11 = "/^[^\\/*]/";
    $this->peg_c12 = array( "type" => "class", "value" => "[/*]", "description" => "[/*]" );
    $this->peg_c13 = "/";
    $this->peg_c14 = array( "type" => "literal", "value" => "/", "description" => "\"/\"" );
    $this->peg_c15 = array("type" => "other", "description" => "blank" );
    $this->peg_c16 = "/^[ \\t\\n\\r]/";
    $this->peg_c17 = array( "type" => "class", "value" => "[ \t\n\r]", "description" => "[ \t\n\r]" );
    $this->peg_c18 = "{";
    $this->peg_c19 = array( "type" => "literal", "value" => "{", "description" => "\"{\"" );
    $this->peg_c20 = "/^[^{]/";
    $this->peg_c21 = array( "type" => "class", "value" => "[{]", "description" => "[{]" );
    $this->peg_c22 = array("type" => "any", "description" => "any character" );
    $this->peg_c23 = array("type" => "other", "description" => "command block" );
    $this->peg_c24 = array("type" => "other", "description" => "echo command" );
    $this->peg_c25 = "$";
    $this->peg_c26 = array( "type" => "literal", "value" => "$", "description" => "\"$\"" );
    $this->peg_c27 = array("type" => "other", "description" => "extend command" );
    $this->peg_c28 = "extend";
    $this->peg_c29 = array( "type" => "literal", "value" => "extend", "description" => "\"extend\"" );
    $this->peg_c30 = "end";
    $this->peg_c31 = array( "type" => "literal", "value" => "end", "description" => "\"end\"" );
    $this->peg_c32 = "block";
    $this->peg_c33 = array( "type" => "literal", "value" => "block", "description" => "\"block\"" );
    $this->peg_c34 = array("type" => "other", "description" => "for command" );
    $this->peg_c35 = "for";
    $this->peg_c36 = array( "type" => "literal", "value" => "for", "description" => "\"for\"" );
    $this->peg_c37 = "in";
    $this->peg_c38 = array( "type" => "literal", "value" => "in", "description" => "\"in\"" );
    $this->peg_c39 = "empty";
    $this->peg_c40 = array( "type" => "literal", "value" => "empty", "description" => "\"empty\"" );
    $this->peg_c41 = ",";
    $this->peg_c42 = array( "type" => "literal", "value" => ",", "description" => "\",\"" );
    $this->peg_c43 = array("type" => "other", "description" => "if command" );
    $this->peg_c44 = "if";
    $this->peg_c45 = array( "type" => "literal", "value" => "if", "description" => "\"if\"" );
    $this->peg_c46 = "else";
    $this->peg_c47 = array( "type" => "literal", "value" => "else", "description" => "\"else\"" );
    $this->peg_c48 = array("type" => "other", "description" => "include command" );
    $this->peg_c49 = "include";
    $this->peg_c50 = array( "type" => "literal", "value" => "include", "description" => "\"include\"" );
    $this->peg_c51 = "label";
    $this->peg_c52 = array( "type" => "literal", "value" => "label", "description" => "\"label\"" );
    $this->peg_c53 = array("type" => "other", "description" => "let command" );
    $this->peg_c54 = "let";
    $this->peg_c55 = array( "type" => "literal", "value" => "let", "description" => "\"let\"" );
    $this->peg_c56 = array("type" => "other", "description" => "assignments" );
    $this->peg_c57 = array("type" => "other", "description" => "assignment" );
    $this->peg_c58 = "=";
    $this->peg_c59 = array( "type" => "literal", "value" => "=", "description" => "\"=\"" );
    $this->peg_c60 = array("type" => "other", "description" => "unwrap command" );
    $this->peg_c61 = "unwrap";
    $this->peg_c62 = array( "type" => "literal", "value" => "unwrap", "description" => "\"unwrap\"" );
    $this->peg_c63 = array("type" => "other", "description" => "wrap command" );
    $this->peg_c64 = "wrap";
    $this->peg_c65 = array( "type" => "literal", "value" => "wrap", "description" => "\"wrap\"" );
    $this->peg_c66 = array("type" => "other", "description" => "path" );
    $this->peg_c67 = "/^[!-~]/";
    $this->peg_c68 = array( "type" => "class", "value" => "[!-~]", "description" => "[!-~]" );
    $this->peg_c69 = "\\";
    $this->peg_c70 = array( "type" => "literal", "value" => "\\", "description" => "\"\\\\\"" );
    $this->peg_c71 = "u";
    $this->peg_c72 = array( "type" => "literal", "value" => "u", "description" => "\"u\"" );
    $this->peg_c73 = array("type" => "other", "description" => "symbol" );
    $this->peg_c74 = "/^[_A-Za-z]/";
    $this->peg_c75 = array( "type" => "class", "value" => "[_A-Za-z]", "description" => "[_A-Za-z]" );
    $this->peg_c76 = "/^[_0-9A-Za-z]/";
    $this->peg_c77 = array( "type" => "class", "value" => "[_0-9A-Za-z]", "description" => "[_0-9A-Za-z]" );
    $this->peg_c78 = "||";
    $this->peg_c79 = array( "type" => "literal", "value" => "||", "description" => "\"||\"" );
    $this->peg_c80 = "&&";
    $this->peg_c81 = array( "type" => "literal", "value" => "&&", "description" => "\"&&\"" );
    $this->peg_c82 = "==";
    $this->peg_c83 = array( "type" => "literal", "value" => "==", "description" => "\"==\"" );
    $this->peg_c84 = "!=";
    $this->peg_c85 = array( "type" => "literal", "value" => "!=", "description" => "\"!=\"" );
    $this->peg_c86 = ">=";
    $this->peg_c87 = array( "type" => "literal", "value" => ">=", "description" => "\">=\"" );
    $this->peg_c88 = ">";
    $this->peg_c89 = array( "type" => "literal", "value" => ">", "description" => "\">\"" );
    $this->peg_c90 = "<=";
    $this->peg_c91 = array( "type" => "literal", "value" => "<=", "description" => "\"<=\"" );
    $this->peg_c92 = "<";
    $this->peg_c93 = array( "type" => "literal", "value" => "<", "description" => "\"<\"" );
    $this->peg_c94 = "+";
    $this->peg_c95 = array( "type" => "literal", "value" => "+", "description" => "\"+\"" );
    $this->peg_c96 = "-";
    $this->peg_c97 = array( "type" => "literal", "value" => "-", "description" => "\"-\"" );
    $this->peg_c98 = "%";
    $this->peg_c99 = array( "type" => "literal", "value" => "%", "description" => "\"%\"" );
    $this->peg_c100 = "(-)";
    $this->peg_c101 = array( "type" => "literal", "value" => "(-)", "description" => "\"(-)\"" );
    $this->peg_c102 = "(+)";
    $this->peg_c103 = array( "type" => "literal", "value" => "(+)", "description" => "\"(+)\"" );
    $this->peg_c104 = "~";
    $this->peg_c105 = array( "type" => "literal", "value" => "~", "description" => "\"~\"" );
    $this->peg_c106 = "!";
    $this->peg_c107 = array( "type" => "literal", "value" => "!", "description" => "\"!\"" );
    $this->peg_c108 = "(";
    $this->peg_c109 = array( "type" => "literal", "value" => "(", "description" => "\"(\"" );
    $this->peg_c110 = ")";
    $this->peg_c111 = array( "type" => "literal", "value" => ")", "description" => "\")\"" );
    $this->peg_c112 = "[";
    $this->peg_c113 = array( "type" => "literal", "value" => "[", "description" => "\"[\"" );
    $this->peg_c114 = "]";
    $this->peg_c115 = array( "type" => "literal", "value" => "]", "description" => "\"]\"" );
    $this->peg_c116 = ".";
    $this->peg_c117 = array( "type" => "literal", "value" => ".", "description" => "\".\"" );
    $this->peg_c118 = "=>";
    $this->peg_c119 = array( "type" => "literal", "value" => "=>", "description" => "\"=>\"" );
    $this->peg_c120 = ":";
    $this->peg_c121 = array( "type" => "literal", "value" => ":", "description" => "\":\"" );
    $this->peg_c122 = array("type" => "other", "description" => "boolean" );
    $this->peg_c123 = "false";
    $this->peg_c124 = array( "type" => "literal", "value" => "false", "description" => "\"false\"" );
    $this->peg_c125 = "true";
    $this->peg_c126 = array( "type" => "literal", "value" => "true", "description" => "\"true\"" );
    $this->peg_c127 = array("type" => "other", "description" => "floating point number" );
    $this->peg_c128 = "/^[0-9]/";
    $this->peg_c129 = array( "type" => "class", "value" => "[0-9]", "description" => "[0-9]" );
    $this->peg_c130 = array("type" => "other", "description" => "integer" );
    $this->peg_c131 = array("type" => "other", "description" => "null" );
    $this->peg_c132 = "null";
    $this->peg_c133 = array( "type" => "literal", "value" => "null", "description" => "\"null\"" );
    $this->peg_c134 = array("type" => "other", "description" => "string" );
    $this->peg_c135 = "\"";
    $this->peg_c136 = array( "type" => "literal", "value" => "\"", "description" => "\"\\\"\"" );
    $this->peg_c137 = "/^[^\\0-\\x1F\"\\\\]/";
    $this->peg_c138 = array( "type" => "class", "value" => "[\x00-\x1F\"\\]", "description" => "[\x00-\x1F\"\\]" );
    $this->peg_c139 = "b";
    $this->peg_c140 = array( "type" => "literal", "value" => "b", "description" => "\"b\"" );
    $this->peg_c141 = "f";
    $this->peg_c142 = array( "type" => "literal", "value" => "f", "description" => "\"f\"" );
    $this->peg_c143 = "n";
    $this->peg_c144 = array( "type" => "literal", "value" => "n", "description" => "\"n\"" );
    $this->peg_c145 = "r";
    $this->peg_c146 = array( "type" => "literal", "value" => "r", "description" => "\"r\"" );
    $this->peg_c147 = "t";
    $this->peg_c148 = array( "type" => "literal", "value" => "t", "description" => "\"t\"" );
    $this->peg_c149 = "/^[0-9a-f]/i";
    $this->peg_c150 = array( "type" => "class", "value" => "[0-9a-f]", "description" => "[0-9a-f]" );

    $peg_startRuleFunctions = array( 'Document' => array($this, "peg_parseDocument") );
    $peg_startRuleFunction  = array($this, "peg_parseDocument");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new \Exception("Can't start parsing from rule \"" + $options["startRule"] + "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }
    $peg_result = call_user_func($peg_startRuleFunction);

    $this->peg_cache = array();

    mb_regex_encoding($old_regex_encoding);

    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
      $this->cleanup_state(); // Free up memory
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
      $this->cleanup_state(); // Free up memory
      throw $exception;
    }
  }

};